# Installer les packages nécessaires
install.packages(c("plumber", "arules"))
# Charger les packages
library(plumber)
library(arules)
# Définir la fonction qui applique l'algorithme Apriori
runApriori <- function(file) {
# Charger les données CSV
df <- read.csv(file$datapath, header = TRUE)
# Convertir les données en transactions
trans <- as(df, "transactions")
# Appliquer l'algorithme Apriori
rules <- apriori(trans)
# Retourner les résultats
return(rules)
}
# Définir l'API
#* @param file: fichier CSV d'entrée
#* @post /runApriori
function(file) {
# Exécuter l'algorithme Apriori avec le fichier sélectionné
result <- runApriori(file)
# Retourner les résultats
return(as.data.frame(result))
}
# Lancer l'API
plumber::plumb("api_apriori.R")$run(port = 8000)
install.packages(c("plumber", "arules"))
plumber::plumb(file='api_R/apriori.R')$run()
install.packages(c("plumber", "arules"))
plumber::plumb(file='api_R/apriori.R')$run()
plumber::plumb(file='apriori.R')$run()
View(runApriori)
View(runApriori)
plumber::plumb(file='apriori.R')$run()
# Load the required libraries
library(plumber)
# Define the API function
aprioriAPI <- function(csv_file) {
# Read the CSV file
data <- read.csv(csv_file)
# Preprocess the data
# (e.g. convert variables to appropriate format, remove missing values, etc.)
data <- preprocess(data)
# Run the Apriori algorithm
rules <- apriori(data, parameter = list(support = 0.5, confidence = 0.8))
# Visualize the results
plot(rules, method = "graph", control = list(type = "items"))
}
# Create a plumber object
p <- plumb(aprioriAPI)
View(aprioriAPI)
function(csv_file) {
# Read the CSV file
data <- read.csv(csv_file)
# Preprocess the data
# (e.g. convert variables to appropriate format, remove missing values, etc.)
data <- preprocess(data)
# Run the Apriori algorithm
rules <- apriori(data, parameter = list(support = 0.5, confidence = 0.8))
# Visualize the results
plot(rules, method = "graph", control = list(type = "items"))
}
function(csv_file) {
# Read the CSV file
data <- read.csv(csv_file)
# Preprocess the data
# (e.g. convert variables to appropriate format, remove missing values, etc.)
data <- preprocess(data)
# Run the Apriori algorithm
rules <- apriori(data, parameter = list(support = 0.5, confidence = 0.8))
# Visualize the results
plot(rules, method = "graph", control = list(type = "items"))
}
# Load the required libraries
library(plumber)
# Define the API function
aprioriAPI <- function(csv_file) {
# Read the CSV file
data <- read.csv(csv_file)
# Preprocess the data
# (e.g. convert variables to appropriate format, remove missing values, etc.)
data <- preprocess(data)
# Run the Apriori algorithm
rules <- apriori(data, parameter = list(support = 0.5, confidence = 0.8))
# Visualize the results
plot(rules, method = "graph", control = list(type = "items"))
}
# Create a plumber object
p <- plumb(aprioriAPI)
# Create API endpoint
#' @post /run_apriori
#' @param url URL of CSV file
#' @param cols Columns containing item names
#' @param sep Column separator character
#' @param supp Minimum support value
#' @param conf Minimum confidence value
function(url, cols = c(1,2), sep = ",", supp = 0.2, conf = 0.2){
# Download CSV file from URL
csv_string <- readLines(url)
# Parse character string into data frame
data = read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Preprocess data (e.g., cleaning, formatting, creating transactions)
# ...
# Run Apriori algorithm
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convert rules to data frame
rules_df <- as(rules, "data.frame")
# Return result
rules_df
# Plot rules
}
# Create API endpoint
#' @post /run_apriori
#' @param url URL of CSV file
#' @param cols Columns containing item names
#' @param sep Column separator character
#' @param supp Minimum support value
#' @param conf Minimum confidence value
function(url, cols = c(1,2), sep = ",", supp = 0.2, conf = 0.2){
# Download CSV file from URL
csv_string <- readLines(url)
# Parse character string into data frame
data = read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Preprocess data (e.g., cleaning, formatting, creating transactions)
# ...
# Run Apriori algorithm
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convert rules to data frame
rules_df <- as(rules, "data.frame")
# Return result
rules_df
# Plot rules
}
library(plumber)
library(arules)
library(httpuv)
# Create API endpoint
#' @post /run_apriori
#' @param url URL of CSV file
#' @param cols Columns containing item names
#' @param sep Column separator character
#' @param supp Minimum support value
#' @param conf Minimum confidence value
function(url, cols = c(1,2), sep = ",", supp = 0.2, conf = 0.2){
# Download CSV file from URL
csv_string <- readLines(url)
# Parse character string into data frame
data = read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Preprocess data (e.g., cleaning, formatting, creating transactions)
# ...
# Run Apriori algorithm
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convert rules to data frame
rules_df <- as(rules, "data.frame")
# Return result
rules_df
# Plot rules
}
install.packages("Matrix", repos="http://R-Forge.R-project.org")
install.packages("Matrix", repos = "http://R-Forge.R-project.org")
library(plumber)
library(arules)
library(httpuv)
# Create API endpoint
#' @post /run_apriori
#' @param url URL of CSV file
#' @param cols Columns containing item names
#' @param sep Column separator character
#' @param supp Minimum support value
#' @param conf Minimum confidence value
function(url, cols = c(1,2), sep = ",", supp = 0.2, conf = 0.2){
# Download CSV file from URL
csv_string <- readLines(url)
# Parse character string into data frame
data = read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Preprocess data (e.g., cleaning, formatting, creating transactions)
# ...
# Run Apriori algorithm
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convert rules to data frame
rules_df <- as(rules, "data.frame")
# Return result
rules_df
# Plot rules
}
library(plumber)
library(arules)
library(httpuv)
install.packages("Matrix", repos="http://R-Forge.R-project.org")
# Create API endpoint
#' @post /run_apriori
#' @param url URL of CSV file
#' @param cols Columns containing item names
#' @param sep Column separator character
#' @param supp Minimum support value
#' @param conf Minimum confidence value
function(url, cols = c(1,2), sep = ",", supp = 0.2, conf = 0.2){
# Download CSV file from URL
csv_string <- readLines(url)
# Parse character string into data frame
data = read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Preprocess data (e.g., cleaning, formatting, creating transactions)
# ...
# Run Apriori algorithm
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convert rules to data frame
rules_df <- as(rules, "data.frame")
# Return result
rules_df
# Plot rules
}
install.packages("Matrix", repos = "http://R-Forge.R-project.org")
library(arules)
#' @post /run_apriori
#' @param url URL du fichier CSV
#' @param cols Colonnes contenant les noms des articles
#' @param sep Caractère séparateur de colonnes
#' @param supp Valeur de support minimale
#' @param conf Valeur de confiance minimale
run_apriori <- function(url, cols = c(1, 2), sep = ",", supp = 0.2, conf = 0.2) {
# Télécharger le fichier CSV à partir de l'URL
csv_string <- readLines(url)
# Convertir la chaîne de caractères en data frame
data <- read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Prétraiter les données (par exemple, nettoyage, formatage, création de transactions)
# ...
# Exécuter l'algorithme Apriori
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convertir les règles en data frame
rules_df <- as(rules, "data.frame")
# Retourner le résultat
return(rules_df)
# Tracer les règles
}
# Télécharger le fichier CSV à partir de l'URL
csv_string <- readLines(url)
library(arules)
#' @post /run_apriori
#' @param url URL du fichier CSV
#' @param cols Colonnes contenant les noms des articles
#' @param sep Caractère séparateur de colonnes
#' @param supp Valeur de support minimale
#' @param conf Valeur de confiance minimale
run_apriori <- function(url, cols = c(1, 2), sep = ",", supp = 0.2, conf = 0.2) {
# Télécharger le fichier CSV à partir de l'URL
csv_string <- readLines(url)
# Convertir la chaîne de caractères en data frame
data <- read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Prétraiter les données (par exemple, nettoyage, formatage, création de transactions)
# ...
# Exécuter l'algorithme Apriori
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convertir les règles en data frame
rules_df <- as(rules, "data.frame")
# Retourner le résultat
return(rules_df)
}
library(Matrix, lib.loc = "C:/Program Files/R/R-4.2.2/library")
library(swagger)
library(arules)
#' @post /run_apriori
#' @param url URL du fichier CSV
#' @param cols Colonnes contenant les noms des articles
#' @param sep Caractère séparateur de colonnes
#' @param supp Valeur de support minimale
#' @param conf Valeur de confiance minimale
run_apriori <- function(url, cols = c(1, 2), sep = ",", supp = 0.2, conf = 0.2) {
# Télécharger le fichier CSV à partir de l'URL
csv_string <- readLines(url)
# Convertir la chaîne de caractères en data frame
data <- read.transactions(text = csv_string, rm.duplicates = FALSE, format = "single", cols = cols, sep = sep)
# Prétraiter les données (par exemple, nettoyage, formatage, création de transactions)
# ...
# Exécuter l'algorithme Apriori
rules <- apriori(data, parameter = list(supp = supp, conf = conf))
# Convertir les règles en data frame
rules_df <- as(rules, "data.frame")
# Retourner le résultat
return(rules_df)
}
library(plumber)
library(arules)
# Définition de l'API
api <- plumb("api.R")
library(plumber)
library(arules)
# Définition de l'API
api <- plumb("apri.R")
library(plumber)
library(arules)
# Définition de l'API
api <- plumb("apri.R")
library(plumber)
library(arules)
# Définition de l'API
api <- plumb("apri.R")
plumb(file='apri.R')$run()
plumb(file='apri.R')$run()
